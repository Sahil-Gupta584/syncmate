/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */
import * as runtime from "@prisma/client/runtime/library";
/**
 * Validator
 */
export const validator = runtime.Public.validator;
/**
 * Prisma Errors
 */
export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError;
export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError;
export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError;
export const PrismaClientInitializationError = runtime.PrismaClientInitializationError;
export const PrismaClientValidationError = runtime.PrismaClientValidationError;
/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag;
export const empty = runtime.empty;
export const join = runtime.join;
export const raw = runtime.raw;
export const Sql = runtime.Sql;
/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal;
export const getExtensionContext = runtime.Extensions.getExtensionContext;
/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
export const prismaVersion = {
    client: "6.9.0",
    engine: "81e4af48011447c3cc503a190e86995b66d2a28e",
};
export const NullTypes = {
    DbNull: runtime.objectEnumValues.classes.DbNull,
    JsonNull: runtime.objectEnumValues.classes.JsonNull,
    AnyNull: runtime.objectEnumValues.classes.AnyNull,
};
/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull;
/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull;
/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull;
export const ModelName = {
    User: "User",
    CreatorEditor: "CreatorEditor",
    Video: "Video",
    Channel: "Channel",
    VideoEditor: "VideoEditor",
    Invite: "Invite",
    Session: "Session",
    Account: "Account",
    Verification: "Verification",
    Subscription: "Subscription",
};
/**
 * Enums
 */
export const TransactionIsolationLevel = runtime.makeStrictEnum({
    ReadUncommitted: "ReadUncommitted",
    ReadCommitted: "ReadCommitted",
    RepeatableRead: "RepeatableRead",
    Serializable: "Serializable",
});
export const UserScalarFieldEnum = {
    id: "id",
    email: "email",
    name: "name",
    image: "image",
    emailVerified: "emailVerified",
    role: "role",
    plan: "plan",
    trialEndAt: "trialEndAt",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};
export const CreatorEditorScalarFieldEnum = {
    creatorId: "creatorId",
    editorId: "editorId",
    assignedAt: "assignedAt",
};
export const VideoScalarFieldEnum = {
    id: "id",
    gDriveId: "gDriveId",
    title: "title",
    description: "description",
    duration: "duration",
    thumbnailUrl: "thumbnailUrl",
    scheduledAt: "scheduledAt",
    videoStatus: "videoStatus",
    privacyStatus: "privacyStatus",
    playlistIds: "playlistIds",
    tags: "tags",
    categoryId: "categoryId",
    ownerId: "ownerId",
    importedById: "importedById",
    channelId: "channelId",
    createdAt: "createdAt",
};
export const ChannelScalarFieldEnum = {
    id: "id",
    userId: "userId",
    name: "name",
    ytChannelId: "ytChannelId",
    logoUrl: "logoUrl",
    description: "description",
    refresh_token: "refresh_token",
    access_token: "access_token",
};
export const VideoEditorScalarFieldEnum = {
    videoId: "videoId",
    editorEmail: "editorEmail",
    assignedAt: "assignedAt",
};
export const InviteScalarFieldEnum = {
    id: "id",
    creatorId: "creatorId",
    editorId: "editorId",
    editorEmail: "editorEmail",
    status: "status",
    createdAt: "createdAt",
    expiresAt: "expiresAt",
};
export const SessionScalarFieldEnum = {
    id: "id",
    expiresAt: "expiresAt",
    token: "token",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
    ipAddress: "ipAddress",
    userAgent: "userAgent",
    userId: "userId",
};
export const AccountScalarFieldEnum = {
    id: "id",
    accountId: "accountId",
    providerId: "providerId",
    userId: "userId",
    accessToken: "accessToken",
    refreshToken: "refreshToken",
    idToken: "idToken",
    accessTokenExpiresAt: "accessTokenExpiresAt",
    refreshTokenExpiresAt: "refreshTokenExpiresAt",
    scope: "scope",
    password: "password",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};
export const VerificationScalarFieldEnum = {
    id: "id",
    identifier: "identifier",
    value: "value",
    expiresAt: "expiresAt",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};
export const SubscriptionScalarFieldEnum = {
    id: "id",
    razorpaySubId: "razorpaySubId",
    razorpayCustId: "razorpayCustId",
    status: "status",
    userId: "userId",
    createdAt: "createdAt",
    updatedAt: "updatedAt",
};
export const SortOrder = {
    asc: "asc",
    desc: "desc",
};
export const NullableJsonNullValueInput = {
    DbNull: DbNull,
    JsonNull: JsonNull,
};
export const JsonNullValueInput = {
    JsonNull: JsonNull,
};
export const QueryMode = {
    default: "default",
    insensitive: "insensitive",
};
export const JsonNullValueFilter = {
    DbNull: DbNull,
    JsonNull: JsonNull,
    AnyNull: AnyNull,
};
export const NullsOrder = {
    first: "first",
    last: "last",
};
export const defineExtension = runtime.Extensions
    .defineExtension;
