/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as AuthRouteImport } from "./routes/auth";
import { Route as ProtectedRouteImport } from "./routes/_protected";
import { Route as ProtectedIndexRouteImport } from "./routes/_protected/index";
import { Route as ProtectedVideoVideoIdIndexRouteImport } from "./routes/_protected/video/$videoId/index";
import { Route as ProtectedInviteInviteIdIndexRouteImport } from "./routes/_protected/invite/$inviteId/index";

const AuthRoute = AuthRouteImport.update({
  id: "/auth",
  path: "/auth",
  getParentRoute: () => rootRouteImport,
} as any);
const ProtectedRoute = ProtectedRouteImport.update({
  id: "/_protected",
  getParentRoute: () => rootRouteImport,
} as any);
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => ProtectedRoute,
} as any);
const ProtectedVideoVideoIdIndexRoute =
  ProtectedVideoVideoIdIndexRouteImport.update({
    id: "/video/$videoId/",
    path: "/video/$videoId/",
    getParentRoute: () => ProtectedRoute,
  } as any);
const ProtectedInviteInviteIdIndexRoute =
  ProtectedInviteInviteIdIndexRouteImport.update({
    id: "/invite/$inviteId/",
    path: "/invite/$inviteId/",
    getParentRoute: () => ProtectedRoute,
  } as any);

export interface FileRoutesByFullPath {
  "/auth": typeof AuthRoute;
  "/": typeof ProtectedIndexRoute;
  "/invite/$inviteId": typeof ProtectedInviteInviteIdIndexRoute;
  "/video/$videoId": typeof ProtectedVideoVideoIdIndexRoute;
}
export interface FileRoutesByTo {
  "/auth": typeof AuthRoute;
  "/": typeof ProtectedIndexRoute;
  "/invite/$inviteId": typeof ProtectedInviteInviteIdIndexRoute;
  "/video/$videoId": typeof ProtectedVideoVideoIdIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  "/_protected": typeof ProtectedRouteWithChildren;
  "/auth": typeof AuthRoute;
  "/_protected/": typeof ProtectedIndexRoute;
  "/_protected/invite/$inviteId/": typeof ProtectedInviteInviteIdIndexRoute;
  "/_protected/video/$videoId/": typeof ProtectedVideoVideoIdIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: "/auth" | "/" | "/invite/$inviteId" | "/video/$videoId";
  fileRoutesByTo: FileRoutesByTo;
  to: "/auth" | "/" | "/invite/$inviteId" | "/video/$videoId";
  id:
    | "__root__"
    | "/_protected"
    | "/auth"
    | "/_protected/"
    | "/_protected/invite/$inviteId/"
    | "/_protected/video/$videoId/";
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren;
  AuthRoute: typeof AuthRoute;
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/auth": {
      id: "/auth";
      path: "/auth";
      fullPath: "/auth";
      preLoaderRoute: typeof AuthRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_protected": {
      id: "/_protected";
      path: "";
      fullPath: "";
      preLoaderRoute: typeof ProtectedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    "/_protected/": {
      id: "/_protected/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof ProtectedIndexRouteImport;
      parentRoute: typeof ProtectedRoute;
    };
    "/_protected/video/$videoId/": {
      id: "/_protected/video/$videoId/";
      path: "/video/$videoId";
      fullPath: "/video/$videoId";
      preLoaderRoute: typeof ProtectedVideoVideoIdIndexRouteImport;
      parentRoute: typeof ProtectedRoute;
    };
    "/_protected/invite/$inviteId/": {
      id: "/_protected/invite/$inviteId/";
      path: "/invite/$inviteId";
      fullPath: "/invite/$inviteId";
      preLoaderRoute: typeof ProtectedInviteInviteIdIndexRouteImport;
      parentRoute: typeof ProtectedRoute;
    };
  }
}

interface ProtectedRouteChildren {
  ProtectedIndexRoute: typeof ProtectedIndexRoute;
  ProtectedInviteInviteIdIndexRoute: typeof ProtectedInviteInviteIdIndexRoute;
  ProtectedVideoVideoIdIndexRoute: typeof ProtectedVideoVideoIdIndexRoute;
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedInviteInviteIdIndexRoute: ProtectedInviteInviteIdIndexRoute,
  ProtectedVideoVideoIdIndexRoute: ProtectedVideoVideoIdIndexRoute,
};

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  AuthRoute: AuthRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
